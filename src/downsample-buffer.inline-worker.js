export const worker = '"use strict";function isBufferData(data){const hasData=data.data!==undefined;const hasNumValuesPerSample=Number.isFinite(data.numValuesPerSample);return hasData&&hasNumValuesPerSample}function downsampleChannels(channels,renderWidth){const numChannels=channels.length;const numValuesPerSample=2;const numSamplesPerPixel=Math.max(Math.floor(channels[0].length/renderWidth),1);const downsampled=Array(numChannels);for(let c=0;c<numChannels;c++){const channel=channels[c];let min=0;let max=0;const channelLength=channel.length;const numSamples=Math.floor(channelLength/numSamplesPerPixel)*numValuesPerSample;const samples=new Float32Array(numSamples);let sampleIdx=0;let windowIdx=0;for(let i=0;i<channelLength;i++){const sample=channel[i];if(sample<min){min=sample}if(sample>max){max=sample}windowIdx++;if(windowIdx===numSamplesPerPixel){samples[sampleIdx]=min;samples[sampleIdx+1]=max;sampleIdx+=2;min=0;max=0;windowIdx=0}}downsampled[c]=samples}return{data:downsampled,numValuesPerSample:numValuesPerSample}}function downsampleRenderData(input,renderWidth){const numChannels=input.data.length;const downsampled=Array(numChannels);const numValuesPerSample=input.numValuesPerSample;const numOutSamples=renderWidth*numValuesPerSample;const numInputSamples=input.data[0].length;const inputStep=numOutSamples/numInputSamples;for(let c=0;c<numChannels;c++){const inChannel=input.data[c];const downsampledChannel=new Float32Array(numOutSamples);let min=0;let max=0;let inIdx=0;let outIdx=0;for(let i=0;i<numInputSamples;i+=numValuesPerSample){const inMin=inChannel[i];const inMax=inChannel[i+1];if(inMin<min){min=inMin}if(inMax>max){max=inMax}inIdx+=inputStep;if(inIdx>=1){downsampledChannel[outIdx]=min;downsampledChannel[outIdx+1]=max;outIdx+=numValuesPerSample;inIdx%=1;min=0;max=0}}downsampled[c]=downsampledChannel}return{data:downsampled,numValuesPerSample:numValuesPerSample}}const ctx=self;ctx.addEventListener("message",event=>{if(event.data.method==="channels"){const{channels:channels,renderWidth:renderWidth}=event.data.downsampleData;if(channels===undefined){throw new Error("data is missing channels")}if(renderWidth===undefined){throw new Error("data is missing renderWidth")}ctx.postMessage(downsampleChannels(channels,renderWidth))}else if(event.data.method==="renderData"){const{renderData:renderData,renderWidth:renderWidth}=event.data.downsampleData;if(renderData===undefined){throw new Error("data is missing renderData")}if(renderWidth===undefined){throw new Error("data is missing renderWidth")}ctx.postMessage(downsampleRenderData(renderData,renderWidth))}else{throw new Error("unknown method")}});';